---
prometheus_config_dir: /etc/prometheus
prometheus_db_dir: /var/lib/prometheus
prometheus_binary_local_dir: /usr/local/bin
prometheus_config_file: 'prometheus.yml.j2'
prometheus_web_listen_address: "0.0.0.0:9090"
prometheus_storage_retention: "15d"
prometheus_storage_retention_size: "5GB"
prometheus_read_only_dirs: []
# prometheus_alert_rules_files:
#   - prometheus/rules/*.rules
# prometheus_web_external_url: ''
# prometheus_web_config:
#   tls_server_config: {}
#   http_server_config: {}
#   basic_auth_users: {}
prometheus_global:
  scrape_interval: 1s
  # scrape_timeout: 10s
  evaluation_interval: 1s
prometheus_targets:
  node:
  - targets:
    - "{{ node_target }}"
prometheus_scrape_configs:
  - job_name: "ec2_node"
    # metrics_path: "{{ prometheus_metrics_path }}"
    ec2_sd_configs:
      - region: "{{ lookup('ansible.builtin.env', 'AWS_DEFAULT_REGION') }}"
        access_key: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID') }}"
        secret_key: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY') }}"
        port: 9090
        filters:
          - name: tag:Name
            values:
              - "prometheus-{{ resource_id }}"
              - "backend-{{ resource_id }}"
    relabel_configs:
      - source_labels: [__meta_ec2_public_ip]
        replacement: '${1}:9090'
        target_label: __address__
      - source_labels: [__meta_ec2_tag_Name]
        target_label: instance
  - job_name: "prometheus"
    metrics_path: "/metrics" #"{{ prometheus_metrics_path }}"
    static_configs:
      - targets:
          - "{{ prometheus_target }}"
  - job_name: "node"
    file_sd_configs:
      - files:
          - "{{ prometheus_config_dir }}/file_sd/node.yml"
prometheus_alertmanager_config:
  - scheme: https
    path_prefix: alertmanager/
    basic_auth:
      username: 
      password: 
    static_configs:
      - targets: ["127.0.0.1:9093"]
    proxy_url: "127.0.0.2"
prometheus_alert_rules:
  - alert: Watchdog
    expr: vector(1)
    for: 10m
    labels:
      severity: warning
    annotations:
      description: "This is an alert meant to ensure that the entire alerting pipeline is functional.\nThis alert is always firing, therefore it should always be firing in Alertmanager\nand always fire against a receiver. There are integrations with various notification\nmechanisms that send a notification when this alert is not firing. For example the\n\"DeadMansSnitch\" integration in PagerDuty."
      summary: 'Ensure entire alerting pipeline is functional'
  - alert: InstanceDown
    expr: 'up == 0'
    for: 5m
    labels:
      severity: critical
    annotations:
      description: '{% raw %}{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.{% endraw %}'
      summary: '{% raw %}Instance {{ $labels.instance }} down{% endraw %}'
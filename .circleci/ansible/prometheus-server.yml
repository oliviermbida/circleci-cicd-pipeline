---

- hosts: server
  user: ubuntu
  roles:
  - prometheus-server
  vars:
    prometheus_config_dir: /etc/prometheus
    prometheus_db_dir: /var/lib/prometheus
    prometheus_binary_local_dir: /usr/local/bin
    prometheus_config_file: 'prometheus.yml.j2'
    prometheus_web_listen_address: "0.0.0.0:9090"
    prometheus_storage_retention: "15d"
    prometheus_storage_retention_size: "5GB"
    prometheus_read_only_dirs: []
    # prometheus_alert_rules_files:
    #   - prometheus/rules/*.rules
    # prometheus_web_external_url: ''
    # prometheus_web_config:
    #   tls_server_config: {}
    #   http_server_config: {}
    #   basic_auth_users: {}
    prometheus_global:
      scrape_interval: 1s
      # scrape_timeout: 10s
      evaluation_interval: 1s
    prometheus_targets:
      node:
      - targets:
        - localhost:9100
        - $EC2_HOST:9100
    prometheus_scrape_configs:
      - job_name: "node"
        # metrics_path: "{{ prometheus_metrics_path }}"
        ec2_sd_configs:
          - region: $AWS_DEFAULT_REGION
            access_key: $AWS_ACCESS_KEY_ID
            secret_key: $AWS_SECRET_ACCESS_KEY
            port: 9100
    prometheus_alertmanager_config:
      - scheme: https
        path_prefix: alertmanager/
        basic_auth:
          username: 
          password: 
        static_configs:
          - targets: ["127.0.0.1:9093"]
        proxy_url: "127.0.0.2"
    prometheus_alert_rules:
      - alert: Watchdog
        expr: vector(1)
        for: 10m
        labels:
          severity: warning
        annotations:
          description: "This is an alert meant to ensure that the entire alerting pipeline is functional.\nThis alert is always firing, therefore it should always be firing in Alertmanager\nand always fire against a receiver. There are integrations with various notification\nmechanisms that send a notification when this alert is not firing. For example the\n\"DeadMansSnitch\" integration in PagerDuty."
          summary: 'Ensure entire alerting pipeline is functional'
      - alert: InstanceDown
        expr: 'up == 0'
        for: 5m
        labels:
          severity: critical
        annotations:
          description: '{% raw %}{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes.{% endraw %}'
          summary: '{% raw %}Instance {{ $labels.instance }} down{% endraw %}'
  pre_tasks:
    - name: "Wait 15 seconds for target connection to become reachable/usable."
      wait_for_connection:
        timeout: 15
  environment:
    - EC2_HOST: "{{ lookup('ansible.builtin.env', 'EC2_HOST') }}"
    - AWS_DEFAULT_REGION: "{{ lookup('ansible.builtin.env', 'AWS_DEFAULT_REGION')}}"
    - AWS_ACCESS_KEY_ID: "{{ lookup('ansible.builtin.env', 'AWS_ACCESS_KEY_ID')}}"  
    - AWS_SECRET_ACCESS_KEY: "{{ lookup('ansible.builtin.env', 'AWS_SECRET_ACCESS_KEY')}}" 
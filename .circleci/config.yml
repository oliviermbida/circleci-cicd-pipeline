version: 2.1
orbs: 
  jira: circleci/jira@1.3.1
  slack: circleci/slack@4.10.1

commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
    cancel-workflow:
      description: Cancel workflow given a commit message to stop it being run automatically
      parameters:
        workflow_id:
          type: string
          default: $CIRCLE_WORKFLOW_ID
        custom-identifier:
          type: string
          default: "NO_BUILD"
      steps: 
        - checkout
        - run: | 
            commit_message=$(git log -1 HEAD --pretty=format:%s)
            if [[ $commit_message == *<<parameters.custom-identifier>>* ]]; then
            echo "<<parameters.custom-identifier>> commit, cancelling workflow <<parameters.workflow_id>>"
            curl --request POST \
              --url https://circleci.com/api/v2/workflow/<<parameters.workflow_id>>/cancel \
              --header "Circle-Token: ${CIRCLE_TOKEN}"
            fi
    scan:
      description: Detect bugs and vulnerabilities using sonar scanner
      parameters:
        cache_version:
          default: 1
          description: increment this value if the cache is corrupted and you want to start with a clean cache
          type: integer
        project_root:
          default: .
          description: the root of the project that should be analyzed (relative to the root directory of the repository)
          type: string
        exclusions:
          type: string
          default: "**/*.yaml,**/*.yml"
        host_url:
          type: string
          default: "https://sonarcloud.io"
        sources:
          type: string
          default: "."
        runner_opts:
          type: string
          default: "-Xms1024m"
        projectKey:
          type: string
          default: "circle-cicd-pipeline"
        organization:
          type: string
          default: "ai-uavsystems"
      steps:
        - run:
            command: mkdir -p /tmp/cache/scanner
            name: Create cache directory if it doesn't exist
        - restore_cache:
            keys:
              - v<<parameters.cache_version>>-sonarcloud-scanner-4.7.0.2747
        - run:
            name: SonarCloud
            command: |
              set -e
              VERSION=4.7.0.2747
              SCANNER_DIRECTORY=/tmp/cache/scanner
              export SONAR_USER_HOME=$SCANNER_DIRECTORY/.sonar
              OS="linux"
              echo $SONAR_USER_HOME

              export SONAR_RUNNER_OPTS="<< parameters.runner_opts >>"

              if [[ ! -x "$SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner" ]]; then
                curl -Ol https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$VERSION-$OS.zip
                unzip -qq -o sonar-scanner-cli-$VERSION-$OS.zip -d $SCANNER_DIRECTORY
              fi

              chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner
              chmod +x $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/jre/bin/java

              curl -u SONAR_TOKEN: <<parameters.host_url>>/api/user_tokens/generate
              cd <<parameters.project_root>>
              $SCANNER_DIRECTORY/sonar-scanner-$VERSION-$OS/bin/sonar-scanner \
              -Dsonar.organization=<< parameters.organization >> \
              -Dsonar.projectKey=<< parameters.projectKey >> \
              -Dsonar.host.url=<< parameters.host_url >> \
              -Dsonar.login=$SONAR_TOKEN \
              -Dsonar.projectBaseDir=<< parameters.project_root >> \
              -Dsonar.sources=<< parameters.sources >> \
              -Dsonar.exclusions="<< parameters.exclusions >>"                  
        - save_cache:
            key: v<<parameters.cache_version>>-sonarcloud-scanner-4.7.0.2747
            paths: /tmp/cache/scanner
defaults: &defaults
  docker:
    - image: circleci/node:13.8.0
            
jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: 
            - v1-frontend-build-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache 
            - v1-frontend-build-
      - run:
          name: Build front-end
          command: |
            cd ./frontend
            npm i
            npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
          key: v1-frontend-build-{{ checksum "package-lock.json" }}
      # - jira/notify

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-backend-build-{{ checksum "backend/package-lock.json" }}
            # fallback to using the latest cache 
            - v1-backend-build-
      - run:
          name: Back-end build
          command: |
            cd ./backend
            npm i
            npm run build
      - save_cache:
          paths: 
            - backend/node_modules
          key: v1-backend-build-{{ checksum "package-lock.json" }}
      # - jira/notify

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - v1-frontend-build-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache 
            - v1-frontend-build-
      - run:
          name: Test front-end
          command: |
            cd ./frontend 
            npm i
            npm test 
      # - jira/notify              
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
      # - run:
      #     name: Notify failed Tests
      #     command: curl --data fail_tests.log http://example.com/error_logs
      #     when: on_fail             
  test-backend:
    <<: *defaults
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - v1-backend-build-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache 
            - v1-backend-build-
      - run:
          name: Test front-end
          command: |
            cd ./backend 
            npm i
            npm test 
      # - jira/notify            
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: basic_success_1
      # - run:
      #     name: Notify failed Tests
      #     command: curl --data fail_tests.log http://example.com/error_logs
      #     when: on_fail             
  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - scan:
          project_root: .
      # Restore from cache
      - restore_cache:
          keys: 
            - v1-frontend-build-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache 
            - v1-frontend-build-
      - run:
          name: Scan front-end
          command: |
            cd ./frontend 
            npm install 
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force
      # - jira/notify
      - slack/notify:
          event: fail
          template: basic_fail_1
  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - scan:
          project_root: .
      # Restore from cache
      - restore_cache:
          keys: 
            - v1-backend-build-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache 
            - v1-backend-build-
      - run:
          name: Scan front-end
          command: |
            cd ./backend 
            npm install
            #npm audit --audit-level=critical 
            npm audit fix --audit-level=critical --force
      # - jira/notify
      - slack/notify:
          event: fail
          template: basic_fail_1
#   deploy-infrastructure:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               #--tags project=your-tag \
#               # --stack-name "your back-end stack name with workflow id" \
#               # --parameter-overrides ID="your workflow id"  
#               exit 1
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               #--tags project=your-tag \
#               # --stack-name "your front-end stack name with workflow id" \
#               # --parameter-overrides ID="your workflow id"  
#               exit 1
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             # Your code here
#             exit 1
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure      

#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Configure server
#           command: |
#             # Your code here
#             exit 1
#       # Here's where you will add some code to rollback on failure      

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          pre-steps: # Check commit message before build-frontend
            - cancel-workflow
      - build-backend:
          pre-steps: # Check commit message before build-backend
            - cancel-workflow
      - test-frontend:
          post-steps:
            - jira/notify:
                environment_type: testing
                job_type: build
          requires: 
            - build-frontend
          filters:
            branches:
              only: master
      - test-backend:
          post-steps:
            - jira/notify:
                environment_type: testing
                job_type: build
          requires: 
            - build-backend
          filters:
            branches:
              only: master
      - scan-backend:
          post-steps:
            - jira/notify:
                environment_type: testing
                job_type: build
          requires: 
            - build-backend
      - scan-frontend:
          post-steps:
            - jira/notify:
                environment_type: testing
                job_type: build
          requires: 
            - build-frontend
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
  nightly:
    jobs:
      - test-frontend
      - test-backend
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master